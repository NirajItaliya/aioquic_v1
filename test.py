import binascii

import QUICHeader
import socket
from utils.string_to_ascii import string_to_ascii
from utils.packet_to_hex import extract_from_packet, extract_from_packet_as_bytestring
import random
from events.Events import SendInitialCHLOEvent, SendGETRequestEvent, CloseConnectionEvent, SendFullCHLOEvent, ZeroRTTCHLOEvent, ResetEvent
from utils.SessionInstance import SessionInstance
from Crypto.Cipher import AES
from aioquic.quic.crypto import hkdf_extract,hkdf_expand_label,cipher_suite_hash , CipherSuite, AEAD, CryptoError, HeaderProtection ,CryptoContext,CryptoPair
from crypto.Secret import secret_all
from CryptoFrame import CryptoFrame
from donna25519 import PrivateKey, PublicKey
from cryptography.hazmat.primitives.kdf.hkdf import HKDF
from cryptography.hazmat.primitives import hashes

from functools import partial

import certifi
import service_identity
from cryptography import x509
from cryptography.exceptions import InvalidSignature
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives import hashes, hmac, serialization
from cryptography.hazmat.primitives.asymmetric import (
    dsa,
    ec,
    ed448,
    ed25519,
    padding,
    rsa,
    x448,
    x25519,
)
from cryptography.hazmat.primitives.kdf.hkdf import HKDFExpand
from cryptography.hazmat.primitives.serialization import Encoding, PublicFormat

import hashlib
from scapy.layers.tls.handshake import TLSClientHello,TLSFinished

# s = "c7c3b9a24d436ed311c3f64bd96d1e336026dd5f979e05981921dfa2b0f66231"

SessionInstance.get_instance().tlschlo = bytes.fromhex("010001750303d46b8eccc46d510962bd21622b3dfe88b291982d1315bea095e2be5bf3fa524200000613021301130301000146003300a700a50017004104a3a1313b5109e6221c3917ad5fd911f768aab25a0edca77f6ffd54fbd0a5fc579be1c73d98043afad8754ab050ca44dda7e87bb832a653b44ec599432fe19f12001d0020d0e9735b5cc21ec3429df89af44ef1a821d060cf85cfec4e990153bd3fab5c7e001e00389883efde0767689bd660ae29d906b314e4314709438b0b9743caf58e0d1e2e8ad86e91fe1f39f00046492bf1fbf7c090fc5f9847d76a4289002b0003020304000d000e000c080404030401020108070808000a000800060017001d001e002d000201010000000e000c0000096c6f63616c686f73740010001d001b0268330568332d33320568332d33310568332d33300568332d32390039003901048000ea6004048010000005048010000006048010000007048010000008024080090240800a01030b01190e01080f0890bbb9c59b09bdb5")

SessionInstance.get_instance().tlsshalo = bytes.fromhex("020000770303b8122afb86f3a8eaa036bfebb3cdeaaf82dc1a7d1e373afd77505d2293b1351400130200004f002b000203040033004500170041046d3dbedaa10a2aec01b3b2d40e2095ff0dadfb2a1674b404641e42707510782db8459b4f3c2dfed3968774be362408420fbdf88f43331a58548d1e0a6bb358b7")


SessionInstance.get_instance().crypto_cert = bytes.fromhex("0b00032e0000032a0003253082032130820209a0030201020208155a92adc2048f90300d06092a864886f70d01010b05003022310b300906035504061302555331133011060355040a130a4578616d706c65204341301e170d3138313030353031333831375a170d3139313030353031333831375a302b310b3009060355040613025553311c301a060355040313136578616d706c652e756c666865696d2e6e657430820122300d06092a864886f70d01010105000382010f003082010a0282010100c4803606bae7476b089404eca7b691043ff792bc19eefb7d74d7a80d001e7b4b3a4ae60fe8c071fc73e7024c0dbcf4bdd11d396bba70464a13e94af83df3e10959547bc955fb412da3765211e1f3dc776caa53376eca3aecbec3aab73b31d56cb6529c8098bcc9e02818e20bf7f8a03afd1704509ece79bd9f39f1ea69ec47972e830fb5ca95de95a1e60422d5eebe527954a1e7bf8a86f6466d0d9f16951a4cf7a04692595c1352f2549e5afb4ebfd77a37950144e4c026874c653e407d7d23074401f484ffd08f7a1fa05210d1f4f0d5ce79702932e2cabe701fdfad6b4bb71101f44bad666a11130fe2ee829e4d029dc91cdd6716dbb9061886edc1ba94210203010001a3523050300e0603551d0f0101ff0404030205a0301d0603551d250416301406082b0601050507030206082b06010505070301301f0603551d23041830168014894fde5bcc69e252cf3ea300dfb197b81de1c146300d06092a864886f70d01010b05000382010100591645a69a2e3779e4f6dd271aba1c0bfd6cd75599b5e7c36e533eff3659084324c9e7a504079d39e0d42987ffe3ebdd09c1cf1d914455870b571dd19bdf1d24f8bb9a11fe80fd592ba0398cde11e2651e618ce598fa96e5372eef3d248afde17463ebbfabb8e4d1ab502a54ec0064e92f7819660d3f27cf209e667fce5ae2e4ac99c7c93818f8b2510722dfed97f32e3e9349d4c66c9ea6396d744462a06b42c6d5ba688eac3a017bddfc8e2cfcad27cb69d3ccdca280414465d3ae348ce0f34ab2fb9c618371312b191041641c237f11a5d65c844f0404849938712b959ed685bc5c5dd645ed19909473402926dcb40e3469a15941e8e2cca84bb6084636a00000")

SessionInstance.get_instance().crypto_certverify = bytes.fromhex("0f000104080401000a99af32a9e406d725f9a9396de5af3756b7a8f6e4dad585abc3f87c6d1fc15f5f00aba8dca9d05cdb51d3c935433656d88b7432005ee7e04803b2475744d7555cf3de489cc216a485a728b21890e87aa9415d19e63a6a779b9cdbb128a804c428b827fa65dfcd952ace54461e8a234058988e7f264d7ab6a51a21c62979b7a679f4a08770856e926d371b2e89169aa190b803636bb10c0fb905983d2b500aad2683dfbe156eccf666de1a5ad45d7738d5e78bd17bc3e6d25f9ad4afba8f81de9f4d5572118e08551a4bb94b56a970e804c68267454b517fc8386c9bae3a77cccb7f290f6e58fba126f05333a11f8ab0892e6e7a89585382d36eef2529cf5b7b")

SessionInstance.get_instance().crypto_extensions = bytes.fromhex("0800005600540010000b00090870696e672f312e30003900410008000102030405060701048001d4c003048000fff70404805000000504800800000604800800000704800800000801020901020a01030b01190f05735f636964")

SessionInstance.get_instance().crypto_finished = bytes.fromhex("14000020068fcb606aa1c8aa354d7b6064a3328cf376bcd9f3200e68ace3de2ee9fcaccb")





# clinet_handshak_secret = secret_all.nth_secret(cipher_suite = 0x1302,shared_key = bytes.fromhex("d2c184df525c63a19330540eb7af9915501116399620c28260e015b02036729b"),lable =b'c hs traffic')

# print(bytes.hex(clinet_handshak_secret))
# handshake_clinet_ACK = bytes.fromhex("020141fa0000")
# handshake_header = bytes.fromhex("e10000000108d12a4e37e5bd008508b42113b333bbd94440180002")
# crypto_context_sever = CryptoContext()
# crypto_context_sever.setup(cipher_suite = 0x1302,secret =  clinet_handshak_secret ,version = 1)
    
# handshake_clinet_data = crypto_context_sever.encrypt_packet(handshake_header,handshake_clinet_ACK,2)
# print("handshake_clinet_data",bytes.hex(handshake_clinet_data))


#initial[1] :ACK
initial_clinet_ACK = bytes.fromhex("020041190000")
initial_header = bytes.fromhex("c10000000108247d525363628ed10890bbb9c59b09bdb50040180001")
_cryptoPair = CryptoPair()
_cryptoPair.setup_initial(cid= bytes.fromhex("f16ea1de0f91b8e8"),is_client= True,version= 1)
encrypted_initial_data = _cryptoPair.encrypt_packet(initial_header,initial_clinet_ACK,1)


_cryptoPair.setup_initial(cid= bytes.fromhex("f16ea1de0f91b8e8"),is_client= False,version= 1)
plain_header, payload, packet_number  = _cryptoPair.decrypt_packet(encrypted_initial_data,26,1)

print("encrypted_initial_data: " ,bytes.hex(encrypted_initial_data))
print("initial_header: ",bytes.hex(plain_header))
print("initial_clinet_ACK: ",bytes.hex(payload))
print("packet_number: ",packet_number)

#handshake[1] : ACK 
handshake_clinet_ACK = bytes.fromhex("020141190000")
handshake_header = bytes.fromhex("e10000000108247d525363628ed10890bbb9c59b09bdb540180002")

_cryptoContext= CryptoContext()
handshake_secret = secret_all.nth_secret(cipher_suite = 0x1302 , shared_key = bytes.fromhex("6575a214a8fbec3c780847c27a407db95e18db95dda4ba1e08e15ac185b384c5"),lable = b"c hs traffic")

_cryptoContext.setup(cipher_suite= 0x1302,secret= handshake_secret,version=1 )
encrypted_handshake_data = _cryptoContext.encrypt_packet(handshake_header,handshake_clinet_ACK,2)

handshake_secret = secret_all.nth_secret(cipher_suite = 0x1302 , shared_key = bytes.fromhex("6575a214a8fbec3c780847c27a407db95e18db95dda4ba1e08e15ac185b384c5"),lable = b"c hs traffic")
_cryptoContext.setup(cipher_suite= 0x1302,secret= handshake_secret,version=1 )
plain_header, payload, packet_number ,crypto= _cryptoContext.decrypt_packet(encrypted_handshake_data,25,2)

print("encrypted_handshake_data: " ,bytes.hex(encrypted_handshake_data))
print("initial_header: ",bytes.hex(plain_header))
print("initial_clinet_ACK: ",bytes.hex(payload))
print("packet_number: ",s)

# Initial : "cd0000000108247d525363628ed10890bbb9c59b09bdb50040187176c9a1cacc03dfd8076436f1d713a9a728ef5d5e1668ee"
# handshake: "e40000000108247d525363628ed10890bbb9c59b09bdb5401845238ea10cd86c694b0036b0690bf8f45d055edb5aa6aa95"